# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  learn-sam

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
  - AWS::Serverless-2016-10-31

Parameters:
# AWS Region for which Resources should be deployed.
  RCU:
    Description: Read capacity unit for DynamoDB Tables
    Type: String
    Default: '2'
  WCU:
    Description: Write capacity unit for DynamoDB Tables
    Type: String
    Default: '2'
  GS1RCU:
    Description: Global Secondary Index Read capacity unit for DynamoDB Tables
    Type: String
    Default: '1'
  GS1WCU:
    Description: Global Secondary Index Write capacity unit for DynamoDB Tables
    Type: String
    Default: '1'

Globals:
  Function:
    Runtime: nodejs12.x
    CodeUri: ./src/handlers
    Layers:
      - !Ref MainLayer
    Architectures:
      - x86_64
    MemorySize: 128
    Timeout: 30
    Environment:
      Variables:
        # Make table name accessible as environment variable from function code during execution
        SAMPLE_TABLE: !Ref UserTable

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-all-items.js
  AuthApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'*'"
        AllowOrigin: "'*'"
        AllowHeaders: "'Authorization, Content-Type'"
      Auth:
        DefaultAuthorizer: AuthAuthorizer
        Authorizers:
          AuthAuthorizer:
            UserPoolArn: !GetAtt MyCognitoUserPool.Arn
        AddDefaultAuthorizerToCorsPreflight: False

  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-all-items.handler
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        - Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:Scan"
              Resource: !GetAtt UserTable.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET

  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-by-id.handler
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        - Statement:
            - Effect: "Allow"
              Action:
                - "dynamodb:Query"
              Resource: !GetAtt UserTable.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            RestApiId: !Ref AuthApi
            Method: GET

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-item.js
  putItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: put-item.handler
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
      - Statement:
        - Effect: "Allow"
          Action:
          - "dynamodb:PutItem"
          Resource: !GetAtt UserTable.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST

  updateItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: update-items.handler
      Description: A simple example includes a HTTP PUT method to Update item to a DynamoDB table.
      Policies:
      - Statement:
        - Effect: "Allow"
          Action:
          - "dynamodb:UpdateItem"
          Resource: !GetAtt UserTable.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: PUT

  deleteItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: delete-item.handler
      Description: A simple example includes a HTTP PUT method to Update item to a DynamoDB table.
      Policies:
      - Statement:
        - Effect: "Allow"
          Action:
          - "dynamodb:DeleteItem"
          Resource: !GetAtt UserTable.Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            Method: DELETE

  MyCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: "sam-learn"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  MyCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref MyCognitoUserPool
      ClientName: "aws-learn"
      GenerateSecret: false

  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "PK"
          AttributeType: "S"
        -
          AttributeName: "SK"
          AttributeType: "S"
        - 
          AttributeName: "GS1PK"
          AttributeType: "S"
        - 
          AttributeName: "GS1SK"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "PK"
          KeyType: "HASH"
        - 
          AttributeName: "SK"
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: !Ref RCU
        WriteCapacityUnits: !Ref WCU      
      TableName: learnsam        
      GlobalSecondaryIndexes: 
        - 
          IndexName: "GSI"
          KeySchema: 
            - 
              AttributeName: "GS1PK"
              KeyType: "HASH"
            - 
              AttributeName: "GS1SK"
              KeyType: "RANGE"
          Projection: 
            ProjectionType: "ALL"
          ProvisionedThroughput: 
            ReadCapacityUnits: !Ref GS1RCU
            WriteCapacityUnits: !Ref GS1WCU

  MainLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: sam-learn-layer
      Description: Dependencies for sam app [temp-units-conv]
      ContentUri: mainLayer/
      CompatibleRuntimes:
        - nodejs16.x
      LicenseInfo: "MIT"
      RetentionPolicy: Retain
Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
