AWSTemplateFormatVersion: 2010-09-09
Description: learn-sam
Transform:
- AWS::Serverless-2016-10-31
Parameters:
  RCU:
    Description: Read capacity unit for DynamoDB Tables
    Type: String
    Default: '2'
  WCU:
    Description: Write capacity unit for DynamoDB Tables
    Type: String
    Default: '2'
  GS1RCU:
    Description: Global Secondary Index Read capacity unit for DynamoDB Tables
    Type: String
    Default: '1'
  GS1WCU:
    Description: Global Secondary Index Write capacity unit for DynamoDB Tables
    Type: String
    Default: '1'
Globals:
  Function:
    Runtime: nodejs12.x
    CodeUri: ./src/handlers
    Layers:
    - Ref: MainLayer
    Architectures:
    - x86_64
    MemorySize: 128
    Timeout: 30
    Environment:
      Variables:
        SAMPLE_TABLE:
          Ref: UserTable
Resources:
  AuthApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: '''*'''
        AllowOrigin: '''*'''
        AllowHeaders: '''Authorization, Content-Type'''
      Auth:
        DefaultAuthorizer: AuthAuthorizer
        Authorizers:
          AuthAuthorizer:
            UserPoolArn:
              Fn::GetAtt:
              - MyCognitoUserPool
              - Arn
        AddDefaultAuthorizerToCorsPreflight: false
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-all-items.handler
      Description: A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - dynamodb:Scan
          Resource:
            Fn::GetAtt:
            - UserTable
            - Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
      CodeUri: getAllItemsFunction
    Metadata:
      SamResourceId: getAllItemsFunction
  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-by-id.handler
      Description: A simple example includes a HTTP get method to get one item by
        id from a DynamoDB table.
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - dynamodb:Query
          Resource:
            Fn::GetAtt:
            - UserTable
            - Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            RestApiId:
              Ref: AuthApi
            Method: GET
      CodeUri: getByIdFunction
    Metadata:
      SamResourceId: getByIdFunction
  putItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: put-item.handler
      Description: A simple example includes a HTTP post method to add one item to
        a DynamoDB table.
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - dynamodb:PutItem
          Resource:
            Fn::GetAtt:
            - UserTable
            - Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST
      CodeUri: putItemFunction
    Metadata:
      SamResourceId: putItemFunction
  updateItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: update-items.handler
      Description: A simple example includes a HTTP PUT method to Update item to a
        DynamoDB table.
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - dynamodb:UpdateItem
          Resource:
            Fn::GetAtt:
            - UserTable
            - Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: PUT
      CodeUri: updateItemsFunction
    Metadata:
      SamResourceId: updateItemsFunction
  deleteItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: delete-item.handler
      Description: A simple example includes a HTTP PUT method to Update item to a
        DynamoDB table.
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - dynamodb:DeleteItem
          Resource:
            Fn::GetAtt:
            - UserTable
            - Arn
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            Method: DELETE
      CodeUri: deleteItemsFunction
    Metadata:
      SamResourceId: deleteItemsFunction
  MyCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: sam-learn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
      - email
      Schema:
      - AttributeDataType: String
        Name: email
        Required: false
  MyCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: MyCognitoUserPool
      ClientName: aws-learn
      GenerateSecret: false
  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: PK
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      - AttributeName: GS1PK
        AttributeType: S
      - AttributeName: GS1SK
        AttributeType: S
      KeySchema:
      - AttributeName: PK
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits:
          Ref: RCU
        WriteCapacityUnits:
          Ref: WCU
      TableName: learnsam
      GlobalSecondaryIndexes:
      - IndexName: GSI
        KeySchema:
        - AttributeName: GS1PK
          KeyType: HASH
        - AttributeName: GS1SK
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits:
            Ref: GS1RCU
          WriteCapacityUnits:
            Ref: GS1WCU
  MainLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: sam-learn-layer
      Description: Dependencies for sam app [temp-units-conv]
      ContentUri: ../../mainLayer
      CompatibleRuntimes:
      - nodejs16.x
      LicenseInfo: MIT
      RetentionPolicy: Retain
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
